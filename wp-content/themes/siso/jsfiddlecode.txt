<div class="animated-ring">
  <div class="box_1">
    <svg width="100" height="100" id="anim3"></svg>
  </div>
  <div class="box_2">
    <svg width="100" height="100" id="anim1"></svg>
  </div>
  <div class="box_3">
    <svg width="100" height="100" id="anim2"></svg>
  </div>
  <div class="box_4">
    <svg width="100" height="100" id="anim4"></svg>
  </div>
  <div class="box_5">
    <svg width="100" height="100" id="anim5"></svg>
  </div>
</div>




----------

.animated-ring {
  margin-left: auto;
  margin-right: auto;
  //margin-top: 50px;
  background-color: #000;
  position: absolute;
  width: 100px;
  height: 300px;
}

.box_1 {
  position: absolute;
  top: 0;
  left: 0;
  width: 100px;
  height: 100px;
  //background: #ee3e64;
  background: transparent;
  z-index: 30;
}

.box_2 {
  position: absolute;
  top: 39%;
  transform: translateY(-50%);
  width: 100px;
  height: 100px;
  //background: #44accf;
  background: transparent;
  z-index: 35;
}

.box_3 {
  position: absolute;
  top: 39%;
  transform: translateY(-50%);
  width: 100px;
  height: 100px;
  //background: #b7d84b;
  background: transparent;
  z-index: 34;
}

.box_4 {
  position: absolute;
  top: 61.25%;
  transform: translateY(-50%);
  left: 0;
  width: 100px;
  height: 100px;
  //background: #ebde52;
  background: transparent;
  z-index: 31;
}

.box_5 {
  position: absolute;
  top: 39%;
  transform: translateY(-50%);
  width: 100px;
  height: 100px;
  //background: #b7d84b;
  background: transparent;
  z-index: 32;
}

.box_6 {
  position: absolute;
  top: 39%;
  transform: translateY(-50%);
  width: 100px;
  height: 100px;
  //background: #b7d84b;
  background: transparent;
  z-index: 33;
}




----------

var tau = 2 * Math.PI; // http://tauday.com/tau-manifesto

var easeparam = "bounce";

// An arc function with all values bound except the endAngle. So, to compute an
// SVG path string for a given angle, we pass an object with an endAngle
// property to the `arc` function, and it will return the corresponding string.
var arc1 = d3.arc()
  .innerRadius(22.5)
  .outerRadius(45)
  .startAngle(0.75 * tau);

var arc2 = d3.arc()
  .innerRadius(22.5)
  .outerRadius(45)
  .startAngle(0.25 * tau);

var arc3 = d3.arc()
  .innerRadius(22.5)
  .outerRadius(45)
  .startAngle(-0.5 * tau);

var arc4 = d3.arc()
  .innerRadius(22.5)
  .outerRadius(45)
  .startAngle(0 * tau);

var arc5 = d3.arc()
  .innerRadius(22.5)
  .outerRadius(50)
  .startAngle(0.5 * tau);

var arc6 = d3.arc()
  .innerRadius(22.5)
  .outerRadius(50)
  .startAngle(0 * tau);

// Get the SVG container, and apply a transform such that the origin is the
// center of the canvas. This way, we don’t need to position arcs individually.
var svg1 = d3.select("#anim1"),
  width = +svg1.attr("width"),
  height = +svg1.attr("height"),
  g = svg1.append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

var svg2 = d3.select("#anim2"),
  width = +svg2.attr("width"),
  height = +svg2.attr("height"),
  h = svg2.append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

var svg3 = d3.select("#anim3"),
  width = +svg3.attr("width"),
  height = +svg3.attr("height"),
  i = svg3.append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

var svg4 = d3.select("#anim4"),
  width = +svg4.attr("width"),
  height = +svg4.attr("height"),
  j = svg4.append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

var svg5 = d3.select("#anim5"),
  width = +svg5.attr("width"),
  height = +svg5.attr("height"),
  k = svg5.append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
  
var svg6 = d3.select("#anim6"),
  width = +svg5.attr("width"),
  height = +svg5.attr("height"),
  l = svg5.append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

// Add the background arc, from 0 to 100% (tau).
var background1 = g.append("path")
  .datum({
    endAngle: tau
  })
  .style("fill", "transparent")
  .attr("d", arc1);

var background2 = h.append("path")
  .datum({
    endAngle: tau
  })
  .style("fill", "transparent")
  .attr("d", arc2);

var background3 = i.append("path")
  .datum({
    endAngle: tau
  })
  .style("fill", "transparent")
  .attr("d", arc3);

var background4 = j.append("path")
  .datum({
    endAngle: tau
  })
  .style("fill", "transparent")
  .attr("d", arc4);

var background5 = k.append("path")
  .datum({
    endAngle: tau
  })
  .style("fill", "transparent")
  .attr("d", arc5);
  
var background6 = l.append("path")
  .datum({
    endAngle: tau
  })
  .style("fill", "transparent")
  .attr("d", arc6);

// Add the foreground arc in orange, currently showing 12.7%.
var foreground1 = g.append("path")
  .datum({
    endAngle: 0.75 * tau
  })
  .style("fill", "#EF4939")
  .attr("d", arc1);

var foreground2 = h.append("path")
  .datum({
    endAngle: 0.25 * tau
  })
  .style("fill", "#EF4939")
  .attr("d", arc2);

var foreground3 = i.append("path")
  .datum({
    endAngle: -0.5 * tau
  })
  .style("fill", "#EF4939")
  .attr("d", arc3);

var foreground4 = j.append("path")
  .datum({
    endAngle: 0 * tau
  })
  .style("fill", "#EF4939")
  .attr("d", arc4);

var foreground5 = k.append("path")
  .datum({
    endAngle: 0.75 * tau
  })
  .style("fill", "#000")
  .attr("d", arc5);
  
var foreground6 = l.append("path")
  .datum({
    endAngle: 0.25 * tau
  })
  .style("fill", "#000")
  .attr("d", arc6);

// Every so often, start a transition to a new random angle. The attrTween
// definition is encapsulated in a separate function (a closure) below.
d3.timer(function() {
  foreground1.transition()
    .ease(d3.easeLinear)
    .duration(400)
    .attrTween("d", arcTween(0 * tau));
  foreground2.transition()
    .ease(d3.easeLinear)
    .duration(400)
    .attrTween("d", arcTween2(-0.5 * tau));
  foreground3.transition()
    .ease(d3.easeLinear)
    .delay(400)
    .duration(400)
    .attrTween("d", arcTween3(0.4 * tau));
  foreground4.transition()
    .ease(d3.easeLinear)
    .delay(400)
    .duration(400)
    .attrTween("d", arcTween4(0.9 * tau));
});

// Returns a tween for a transition’s "d" attribute, transitioning any selected
// arcs from their current angle to the specified new angle.
function arcTween(newAngle) {

  // The function passed to attrTween is invoked for each selected element when
  // the transition starts, and for each element returns the interpolator to use
  // over the course of transition. This function is thus responsible for
  // determining the starting angle of the transition (which is pulled from the
  // element’s bound datum, d.endAngle), and the ending angle (simply the
  // newAngle argument to the enclosing function).
  return function(d) {

    // To interpolate between the two angles, we use the default d3.interpolate.
    // (Internally, this maps to d3.interpolateNumber, since both of the
    // arguments to d3.interpolate are numbers.) The returned function takes a
    // single argument t and returns a number between the starting angle and the
    // ending angle. When t = 0, it returns d.endAngle; when t = 1, it returns
    // newAngle; and for 0 < t < 1 it returns an angle in-between.
    var interpolate = d3.interpolate(d.endAngle, newAngle);

    // The return value of the attrTween is also a function: the function that
    // we want to run for each tick of the transition. Because we used
    // attrTween("d"), the return value of this last function will be set to the
    // "d" attribute at every tick. (It’s also possible to use transition.tween
    // to run arbitrary code for every tick, say if you want to set multiple
    // attributes from a single function.) The argument t ranges from 0, at the
    // start of the transition, to 1, at the end.
    return function(t) {

      // Calculate the current arc angle based on the transition time, t. Since
      // the t for the transition and the t for the interpolate both range from
      // 0 to 1, we can pass t directly to the interpolator.
      //
      // Note that the interpolated angle is written into the element’s bound
      // data object! This is important: it means that if the transition were
      // interrupted, the data bound to the element would still be consistent
      // with its appearance. Whenever we start a new arc transition, the
      // correct starting angle can be inferred from the data.
      d.endAngle = interpolate(t);

      // Lastly, compute the arc path given the updated data! In effect, this
      // transition uses data-space interpolation: the data is interpolated
      // (that is, the end angle) rather than the path string itself.
      // Interpolating the angles in polar coordinates, rather than the raw path
      // string, produces valid intermediate arcs during the transition.
      return arc1(d);
    };
  };
}

// Returns a tween for a transition’s "d" attribute, transitioning any selected
// arcs from their current angle to the specified new angle.
function arcTween2(newAngle) {
  return function(d) {
    var interpolate = d3.interpolate(d.endAngle, newAngle);
    return function(t) {
      d.endAngle = interpolate(t);
      return arc2(d);
    };
  };
}

function arcTween3(newAngle) {
  return function(d) {
    var interpolate = d3.interpolate(d.endAngle, newAngle);
    return function(t) {
      d.endAngle = interpolate(t);
      return arc3(d);
    };
  };
}

function arcTween4(newAngle) {
  return function(d) {
    var interpolate = d3.interpolate(d.endAngle, newAngle);
    return function(t) {
      d.endAngle = interpolate(t);
      return arc4(d);
    };
  };
}



----------

https://d3js.org/d3.v4.min.js